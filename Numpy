What is Numpy?
NumPy is a Python library used for working with arrays, linear algebra, fourier transform, and matrices. NumPy stands for Numerical Python and it is an open source project. The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

Arrays are very frequently used in data science, where speed and resources are very important.

NumPy is usually imported under the np alias.




# import numpy library
import numpy as np 

# Create a numpy array
a = np.array([0, 1, 2, 3, 4])
a

# Print each element
print("a[0]:", a[0])
print("a[1]:", a[1])
print("a[2]:", a[2])
print("a[3]:", a[3])
print("a[4]:", a[4])

print(np.__version__)

# Check the type of the array
type(a)
# Check the type of the values stored in numpy array
a.dtype

##########Assign value#######
# Create numpy array
c = np.array([20, 1, 2, 3, 4])
c

# Assign the first element to 100
c[0] = 100
c

# Assign the 5th element to 0
c[4] = 0
c

#############Slicing######
# Slicing the numpy array
d = c[1:4]
d

# Set the fourth element and fifth element to 300 and 400
c[3:5] = 300, 400
c

arr = np.array([1, 2, 3, 4, 5, 6, 7])
print(arr[1:5:2])

print(arr[:4])
print(arr[4:])
print(arr[1:5:])


##########Assign Value with List#############3

# Create the index list
select = [0, 2, 3, 4]
select

# Use List to select elements
d = c[select]
d

# Assign the specified elements to new value
c[select] = 100000
c

#########Functions and other Attributes#########
# Create a numpy array
a = np.array([0, 1, 2, 3, 4])
a

# Get the size of numpy array
a.size

# Get the number of dimensions of numpy array
a.ndim

# Get the shape/size of numpy array
a.shape



#############Numpy Statistical Functions############
# Create a numpy array
a = np.array([1, -1, 1, -1])

# Get the mean of numpy array
mean = a.mean()
mean

# Get the standard deviation of numpy array
standard_deviation=a.std()
standard_deviation

# Create a numpy array
b = np.array([-1, 2, 3, 4, 5])
b

# Get the biggest value in the numpy array
max_b = b.max()
max_b

# Get the smallest value in the numpy array
min_b = b.min()
min_b

Practice
c = np.array([-10, 201, 43, 94, 502])
# Enter your code here
max_c=c.max()
min_c=c.min()
sum_c=max_c+min_c
print(sum_c)

#########Numpy Array Operations############
# Write your code below and press Shift+Enter to execute
arr1 = np.array([1, 2, 3])
arr2 = np.array([8, 9, 10])
arr_add = np.add(arr1,arr2)
print(arr_add)
arr_sub = np.subtract(arr1,arr2)
print(arr_sub)
arr_mul = np.multiply(arr1,arr2)
print(arr_mul)
arr_div = np.divide(arr1,arr2)
print(arr_div)
arr_dot = np.dot(arr1,arr2)
print(arr_dot)

# Create a constant to numpy array
u = np.array([1, 2, 3, -1]) 
u
# Add the constant to array
u + 1


# The value of pi
np.pi
# Create the numpy array in radians
x = np.array([0, np.pi/2 , np.pi])
# Calculate the sin of each elements
y = np.sin(x)
y

# Makeup a numpy array within [-2, 2] and 5 elements
np.linspace(-2, 2, num=5)
# Make a numpy array within [-2, 2] and 9 elements
np.linspace(-2, 2, num=9)

# Make a numpy array within [0, 2Ï€] and 100 elements 
x = np.linspace(0, 2*np.pi, num=100)
# Calculate the sine of x list
y = np.sin(x)
# Plot the result
plt.plot(x, y)


#Iterating 1-D Arrays
arr1 = np.array([1, 2, 3])
print(arr1)
for x in arr1:
  print(x)



##############Visualization###############
# Import the libraries
import time 
import sys
import numpy as np 

import matplotlib.pyplot as plt


def Plotvec2(a,b):
    ax = plt.axes()# to generate the full window axes
    ax.arrow(0, 0, *a, head_width=0.05, color ='r', head_length=0.1)#Add an arrow to the  a Axes with arrow head width 0.05, color red and arrow head length 0.1
    plt.text(*(a + 0.1), 'a')
    ax.arrow(0, 0, *b, head_width=0.05, color ='b', head_length=0.1)#Add an arrow to the  b Axes with arrow head width 0.05, color blue and arrow head length 0.1
    plt.text(*(b + 0.1), 'b')
    plt.ylim(-2, 2)#set the ylim to bottom(-2), top(2)
    plt.xlim(-2, 2)#set the xlim to left(-2), right(2)
    
    
Convert the list [-1, 1] and [1, 1] to numpy arrays a and b. Then, plot the arrays as vectors using the fuction Plotvec2 and find their dot product:
# Write your code below and press Shift+Enter to execute
a = np.array([-1,1])
b = np.array([1,1])
dot_prod=Plotvec2(a,b)
dot_prod
print(f"The Dot Prodcut of a,b is {np.dot(a,b)}")

Convert the list [1, 0] and [0, 1] to numpy arrays a and b. Then, plot the arrays as vectors using the function Plotvec2 and find their dot product:
# Write your code below and press Shift+Enter to execute
a = np.array([1,0])
b = np.array([0,1])
Plotvec2(a,b)
print(f"The Dot product of a,b is {np.dot(a,b)}")

Convert the list [1, 1] and [0, 1] to numpy arrays a and b. Then plot the arrays as vectors using the fuction Plotvec2 and find their dot product:
# Write your code below and press Shift+Enter to execute
a = np.array([1, 1])
b = np.array([0, 1])
Plotvec2(a,b)
print(f"The dot product of a,b is {np.dot(a,b)}")

# Write your code below and press Shift+Enter to execute
The vectors used for question 4 and 5 are perpendicular. As a result, the dot product is zero.

# Write your code below and press Shift+Enter to execute
arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])
odd_arr1 = arr1[0:5:2]
print(odd_arr1)
even_arr1 = arr1[1:5:2]
print(even_arr1)
odd_arr2 = arr2[1:5:2]
print(odd_arr2)
even_arr2 = arr2[0:5:2]
print(even_arr2)
